@page "/testPassing"
@inject ApiService service
@inject AppStateService appState
@inject NavigationManager manager
@implements IDisposable
@using System.Text.Json
@using System.ComponentModel.Design;


<div class="parent">
    @if (test is not null)
    {
        <div class="header">
            <div class="header-content">
                <p class="tests__info__body">
                    Название теста: @test.Name
                    Автор: @test.Author
                </p>
            </div>
        </div>
        <div class="main column">
            <ModalComponent Class="@AppStateService.ShowModal" />

            <div class="column align-items-center body box-sizing-border">
                @foreach (var item in test.Questions)
                {
                    <div class="question box-sizing-border box-shadow">
                        @if (item.IsRequired) {
                            <p>
                                Обязательный вопрос!
                            </p>
                        }
                        <p>
                            @item.Body
                        </p>
                        <p class="no-margin">
                            <div>
                                @foreach (var answer in item.Answers)
                                {
                                    <div class="answer-variants border-2-radius-12">
                                        <button class="answer-button @answer.Fill" @onclick="@(() => 
                                            {
                                                answer.UserAnswer = !answer.UserAnswer;
                                                if (answer.UserAnswer == true)
                                                    answer.Fill = "fill-black";
                                                else answer.Fill = "";
                                                    
                                            }
                                        )">
                                            @answer.Body
                                        </button>
                                    </div>
                                }
                            </div>
                        </p>
                    </div>
                }
            </div>
            <button class="button" @onclick="Submit">Готово</button>
        </div>
    }
</div>


@code {
    private Test? test { get; set; }
    private string Black = "";
    private string? ModalShow { get; set; } = null;
    private string? ModalBody { get; set; } = null;
    public void Dispose() => AppStateService.OnChange -= StateHasChanged;
    protected override void OnInitialized()
    {
        AppStateService.OnChange += StateHasChanged;
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            test = await appState.LoadTestAsync();
            StateHasChanged();
            if (await service.IsTokenDoesntExist())
                manager.NavigateTo("/login");
        }
    }

    private void Submit()
    {
        var bebe = test.Questions.FirstOrDefault(q => q.Answers.FirstOrDefault(a => q.IsRequired == true && a.UserAnswer == true, null) is not null);

        if (bebe is null)
            return;

        var эчкере = test.Questions.SelectMany(q => q.Answers).Select(a => a).Where(a => a.UserAnswer == true && a.IsTrueAnswer
        == true).Count();
        AppStateService.ShouldRenderModal = true;
        AppStateService.ModalBody = $"Правильных ответов: {эчкере}";
    }
}
